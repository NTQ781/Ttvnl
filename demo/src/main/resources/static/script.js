// Data for Hiragana characters
const hiraganaData = {
    '„ÅÇ': 'a', '„ÅÑ': 'i', '„ÅÜ': 'u', '„Åà': 'e', '„Åä': 'o',
    '„Åã': 'ka', '„Åç': 'ki', '„Åè': 'ku', '„Åë': 'ke', '„Åì': 'ko',
    '„Åï': 'sa', '„Åó': 'shi', '„Åô': 'su', '„Åõ': 'se', '„Åù': 'so',
    '„Åü': 'ta', '„Å°': 'chi', '„Å§': 'tsu', '„Å¶': 'te', '„Å®': 'to',
    '„Å™': 'na', '„Å´': 'ni', '„Å¨': 'nu', '„Å≠': 'ne', '„ÅÆ': 'no',
    '„ÅØ': 'ha', '„Å≤': 'hi', '„Åµ': 'fu', '„Å∏': 'he', '„Åª': 'ho',
    '„Åæ': 'ma', '„Åø': 'mi', '„ÇÄ': 'mu', '„ÇÅ': 'me', '„ÇÇ': 'mo',
    '„ÇÑ': 'ya', '„ÇÜ': 'yu', '„Çà': 'yo',
    '„Çâ': 'ra', '„Çä': 'ri', '„Çã': 'ru', '„Çå': 're', '„Çç': 'ro',
    '„Çè': 'wa', '„Çí': 'wo', '„Çì': 'n'
};

// Data for Katakana characters
const katakanaData = {
    '„Ç¢': 'a', '„Ç§': 'i', '„Ç¶': 'u', '„Ç®': 'e', '„Ç™': 'o',
    '„Ç´': 'ka', '„Ç≠': 'ki', '„ÇØ': 'ku', '„Ç±': 'ke', '„Ç≥': 'ko',
    '„Çµ': 'sa', '„Ç∑': 'shi', '„Çπ': 'su', '„Çª': 'se', '„ÇΩ': 'so',
    '„Çø': 'ta', '„ÉÅ': 'chi', '„ÉÑ': 'tsu', '„ÉÜ': 'te', '„Éà': 'to',
    '„Éä': 'na', '„Éã': 'ni', '„Éå': 'nu', '„Éç': 'ne', '„Éé': 'no',
    '„Éè': 'ha', '„Éí': 'hi', '„Éï': 'fu', '„Éò': 'he', '„Éõ': 'ho',
    '„Éû': 'ma', '„Éü': 'mi', '„É†': 'mu', '„É°': 'me', '„É¢': 'mo',
    '„É§': 'ya', '„É¶': 'yu', '„É®': 'yo',
    '„É©': 'ra', '„É™': 'ri', '„É´': 'ru', '„É¨': 're', '„É≠': 'ro',
    '„ÉØ': 'wa', '„É≤': 'wo', '„É≥': 'n'
};

const vocabularyData = [
    { japanese: '„Åì„Çì„Å´„Å°„ÅØ', reading: 'konnichiwa', meaning: 'Xin ch√†o' },
    { japanese: '„ÅÇ„Çä„Åå„Å®„ÅÜ', reading: 'arigatou', meaning: 'C·∫£m ∆°n' },
    { japanese: '„Åô„Åø„Åæ„Åõ„Çì', reading: 'sumimasen', meaning: 'Xin l·ªói' },
    { japanese: '„ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶', reading: 'hajimemashite', meaning: 'R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n' },
    { japanese: '„Åï„Çà„ÅÜ„Å™„Çâ', reading: 'sayounara', meaning: 'T·∫°m bi·ªát' },
    { japanese: '„Åä„ÅØ„Çà„ÅÜ', reading: 'ohayou', meaning: 'Ch√†o bu·ªïi s√°ng' },
    { japanese: '„Åì„Çì„Å∞„Çì„ÅØ', reading: 'konbanwa', meaning: 'Ch√†o bu·ªïi t·ªëi' },
    { japanese: '„Åä„ÇÑ„Åô„Åø', reading: 'oyasumi', meaning: 'Ch√∫c ng·ªß ngon' },
    { japanese: '„ÅØ„ÅÑ', reading: 'hai', meaning: 'C√≥/V√¢ng' },
    { japanese: '„ÅÑ„ÅÑ„Åà', reading: 'iie', meaning: 'Kh√¥ng' }
];

const hiraganaOrder = [
    ['„ÅÇ','„ÅÑ','„ÅÜ','„Åà','„Åä'],
    ['„Åã','„Åç','„Åè','„Åë','„Åì'],
    ['„Åï','„Åó','„Åô','„Åõ','„Åù'],
    ['„Åü','„Å°','„Å§','„Å¶','„Å®'],
    ['„Å™','„Å´','„Å¨','„Å≠','„ÅÆ'],
    ['„ÅØ','„Å≤','„Åµ','„Å∏','„Åª'],
    ['„Åæ','„Åø','„ÇÄ','„ÇÅ','„ÇÇ'],
    ['„ÇÑ','„ÇÜ','„Çà'],
    ['„Çâ','„Çä','„Çã','„Çå','„Çç'],
    ['„Çè','„Çí','„Çì']
];

// G·ªôp logic tab-switching, flashcard, v√† auth v√†o m·ªôt kh·ªëi DOMContentLoaded
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM loaded");

    // Fallback hi·ªÉn th·ªã container v√† auth-container
    const container = document.querySelector('.container');
    const authContainer = document.querySelector('#auth-container');
    if (container) container.style.display = 'block';
    if (authContainer) authContainer.style.display = 'block';

    // S·ª≠ d·ª•ng .nav-btn cho menu ƒëi·ªÅu h∆∞·ªõng (Hiragana, Katakana, v.v.)
    const navButtons = document.querySelectorAll('.nav-btn');
    if (!navButtons || navButtons.length === 0) {
        console.error("Nav buttons not found. Check .nav-btn in HTML.");
    } else {
        navButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault(); // NgƒÉn ƒëi·ªÅu h∆∞·ªõng m·∫∑c ƒë·ªãnh n·∫øu l√† <a>
                let section = button.textContent.toLowerCase().replace(' ', '-').replace('ƒë·ªçc-hi·ªÉu', 'reading').replace('nghe-hi·ªÉu', 'listening');
                if (button.classList.contains('level-btn')) {
                    const level = section.replace('n', ''); // L·∫•y N1, N2, v.v.
                    window.location.href = `/level/${level}`;
                } else {
                    showSection(section, button);
                }
            });
        });
    }

    // Flashcard logic
    const flashcards = window.vocabData || vocabularyData; // Fallback to static data
    let currentCardIndex = 0;
    let isFlipped = false;

    function switchTab(event) {
        const section = event.target.dataset.section;
        if (!section) return;

        console.log("Switching to section:", section);
        const contents = document.querySelectorAll('.vocab-content, .kanji-content, .grammar-content, .exercise-content, .flashcard-content');
        contents.forEach(el => el.style.display = 'none');

        const target = document.querySelector(`.${section}-content`);
        if (target) {
            target.style.display = 'block';
        }

        if (section === 'flashcard') {
            displayFlashcards();
        }
    }

    function displayFlashcards() {
        const flashcardContainer = document.querySelector('.flashcard-content');
        if (!flashcardContainer || !flashcards.length) {
            flashcardContainer.innerHTML = '<p>Ch∆∞a c√≥ flashcard.</p>';
            return;
        }

        const card = flashcards[currentCardIndex];
        flashcardContainer.innerHTML = `
            <div class="flashcard-item ${isFlipped ? 'flipped' : ''}">
                <div class="flashcard-front">${card.japanese}</div>
                <div class="flashcard-back">${card.reading} - ${card.meaning}</div>
            </div>
            <div class="flashcard-controls">
                <button onclick="prevCard()">‚¨Ö Quay l·∫°i</button>
                <button onclick="nextCard()">‚ñ∂ Ti·∫øp theo</button>
                <button onclick="flipCard()">üëÅÔ∏è L·∫≠t th·∫ª</button>
                <button onclick="markAsKnown()">‚úÖ ƒê√£ nh·ªõ</button>
            </div>
        `;
    }

    window.flipCard = function() {
        isFlipped = !isFlipped;
        displayFlashcards();
    };

    window.nextCard = function() {
        if (currentCardIndex < flashcards.length - 1) {
            currentCardIndex++;
            isFlipped = false;
            displayFlashcards();
        }
    };

    window.prevCard = function() {
        if (currentCardIndex > 0) {
            currentCardIndex--;
            isFlipped = false;
            displayFlashcards();
        }
    };

    window.markAsKnown = function() {
        flashcards.splice(currentCardIndex, 1);
        if (currentCardIndex >= flashcards.length) {
            currentCardIndex = Math.max(0, flashcards.length - 1);
        }
        displayFlashcards();
    };

    // ƒê·ªãnh nghƒ©a c√°c h√†m auth
    window.login = function() {
        console.log("Login clicked");
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        if (username && password) {
            document.getElementById('auth-message').textContent = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!";
            document.getElementById('auth-container').style.display = 'none';
            document.getElementById('user-info').style.display = 'block';
            document.getElementById('current-user').textContent = username;
        } else {
            document.getElementById('auth-message').textContent = "Vui l√≤ng nh·∫≠p t√†i kho·∫£n v√† m·∫≠t kh·∫©u!";
        }
    };

    window.register = function() {
        console.log("Register clicked");
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        if (username && password) {
            document.getElementById('auth-message').textContent = "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.";
        } else {
            document.getElementById('auth-message').textContent = "Vui l√≤ng nh·∫≠p t√†i kho·∫£n v√† m·∫≠t kh·∫©u!";
        }
    };

    window.showResetPassword = function() {
        console.log("Reset password clicked");
        document.getElementById('reset-password-section').style.display = 'block';
    };

    window.resetPassword = function() {
        console.log("Reset password confirmed");
        const newPassword = document.getElementById('new-password').value;
        if (newPassword) {
            document.getElementById('auth-message').textContent = "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i!";
            document.getElementById('reset-password-section').style.display = 'none';
        } else {
            document.getElementById('auth-message').textContent = "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!";
        }
    };

    window.logout = function() {
        console.log("Logout clicked");
        document.getElementById('user-info').style.display = 'none';
        document.getElementById('auth-container').style.display = 'block';
        document.getElementById('current-user').textContent = '';
        document.getElementById('username').value = '';
        document.getElementById('password').value = '';
        document.getElementById('auth-message').textContent = '';
    };

    window.showSection = function(section, button) {
        console.log("Showing section:", section);
        const sections = document.querySelectorAll('.card');
        sections.forEach(s => s.style.display = 'none');
        const targetSection = document.getElementById(`${section}-section`) || document.getElementById(section);
        if (targetSection) targetSection.style.display = 'block';
        document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
    };

    window.nextQuestion = function() {
        console.log("Next question clicked");
        // Logic cho c√¢u h·ªèi ti·∫øp theo (c·∫ßn tri·ªÉn khai th√™m)
    };

    // G·∫Øn s·ª± ki·ªán cho tab-switching (flashcard)
    const studyButtons = document.querySelectorAll('.study-buttons button');
    if (studyButtons && studyButtons.length > 0) {
        studyButtons.forEach(btn => {
            btn.addEventListener('click', switchTab);
        });
        const vocabBtn = document.querySelector('.study-buttons button[data-section="vocabulary"]');
        if (vocabBtn) {
            vocabBtn.click();
        }
    }

    // Hi·ªÉn th·ªã b√†i nghe n·∫øu c√≥
    displayListening();
});

// Gi·ªØ nguy√™n h√†m displayListening
function displayListening() {
    const listeningContainer = document.querySelector('.listening-content');
    listeningContainer.innerHTML = listeningData.map((item, index) => `
        <div class="listening-tab-item">
            <h4>${item.title}</h4>
            <p>${item.description}</p>
            <audio controls style="width: 100%; margin-bottom: 10px;">
                <source src="${item.audio}" type="audio/mp3" />
                Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ audio.
            </audio>
            <div class="fill-toggle" data-index="${index}" style="cursor: pointer; color: #2563eb; font-weight: bold; margin-bottom: 8px;">
                üî∏ Tr·∫£ l·ªùi c√¢u h·ªèi
            </div>
            <div class="script-toggle" data-index="${index}" style="cursor: pointer; color: green; font-weight: bold; margin-bottom: 6px;">
                üìÑ B√†i nghe
            </div>
            <div id="script-text-${index}" style="display: none; white-space: pre-wrap; border-left: 3px solid #ccc; padding-left: 10px; margin-bottom: 12px;">
                ${item.script || "<i>Ch∆∞a c√≥ n·ªôi dung b√†i nghe</i>"}
            </div>
            <div class="fill-question" id="fill-question-${index}" style="display: none;">
                ${item.questions.map((q, i) => `
                    <div style="margin-bottom: 10px;">
                        <label>${q.question}</label><br/>
                        <input type="text" placeholder="${q.placeholder}" style="width: 100%; padding: 8px; margin-top: 4px;" />
                    </div>
                `).join('')}
            </div>
        </div>
    `).join('');

    document.querySelectorAll('.fill-toggle').forEach(el => {
        el.addEventListener('click', () => {
            const index = el.getAttribute('data-index');
            const target = document.getElementById(`fill-question-${index}`);
            target.style.display = (target.style.display === 'none') ? 'block' : 'none';
        });
    });

    document.querySelectorAll('.script-toggle').forEach(el => {
        el.addEventListener('click', () => {
            const index = el.getAttribute('data-index');
            const target = document.getElementById(`script-text-${index}`);
            target.style.display = (target.style.display === 'none') ? 'block' : 'none';
        });
    });
}
